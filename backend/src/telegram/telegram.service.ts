import { Injectable, OnModuleDestroy, OnModuleInit } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { Telegraf } from 'telegraf';
import { Message } from 'telegraf/typings/core/types/typegram';

const replyMarkup = (ctx) => {
  return `ü§ñ –ü—Ä–∏–≤–µ—Ç <b>${ctx.from.username || '–≥–æ—Å—Ç—å'}!</b>

–≠—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã <b>Telegram Mini App</b> –¥–ª—è —Å—Ç–∞—Ä—Ç–∞–ø–∞ <i>"–†–∞–∑–≤–∏—Ç–∏–µ —Ü–∏—Ñ—Ä–æ–≤–æ–π —Å—Ä–µ–¥—ã –∫–∞—Ñ–µ–¥—Ä—ã"</i>.

üß† –ú—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–ª–∏ Telegram-–±–æ—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É—é—â–µ–≥–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ <b>–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞</b> –¥–ª—è –ø–æ–º–æ—â–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –Ω–∞—à–µ–≥–æ <b>Telegram Mini Apps</b>.

–í –Ω–∞—à–µ–º —Å–ª—É—á–∞–µ, –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –≤—ã–±–æ—Ä–æ–º –Ω—É–∂–Ω–æ–≥–æ –∏–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ –∏–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.

<b>üí° –ü–æ—á–µ–º—É Mini Apps –ª—É—á—à–µ –æ–±—ã—á–Ω—ã—Ö –±–æ—Ç–æ–≤?</b>
‚Ä¢ –ü–æ–∑–≤–æ–ª—è—é—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å <b>–ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å</b> –ø—Ä—è–º–æ –≤–Ω—É—Ç—Ä–∏ Telegram ‚Äî –±–µ–∑ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å–∞–π—Ç.
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Å—Ç–∞—ë—Ç—Å—è <b>–≤–Ω—É—Ç—Ä–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è</b>, —á—Ç–æ —É–¥–æ–±–Ω–µ–µ –∏ –±—ã—Å—Ç—Ä–µ–µ.
‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Telegram Login –¥–∞—ë—Ç <b>–±—ã—Å—Ç—Ä—É—é –∏ –±–µ–∑–æ–ø–∞—Å–Ω—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é</b>.

üöÄ <b>Mini Apps ‚Äî —ç—Ç–æ —É–¥–æ–±–Ω—ã–π –ø—É—Ç—å –∫ —Ü–∏—Ñ—Ä–æ–≤–∏–∑–∞—Ü–∏–∏, –¥–æ—Å—Ç—É–ø–Ω—ã–π –ø—Ä—è–º–æ –≤ –ø—Ä–∏–≤—ã—á–Ω–æ–º –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–µ!</b>

üìú <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥`;
};

@Injectable()
export class TelegramService implements OnModuleInit, OnModuleDestroy {
  private bot: Telegraf;

  constructor(private config: ConfigService) {
    const token = this.config.get<string>('TELEGRAM_BOT_TOKEN');
    if (!token) throw new Error('TELEGRAM_BOT_TOKEN is not defined');

    this.bot = new Telegraf(token);
  }

  async onModuleInit() {
    const webAppUrl = this.config.get<string>('WEBAPP_URL');
    if (!webAppUrl) {
      console.error('‚ùå WEBAPP_URL is not defined');
      throw new Error('WEBAPP_URL is not defined');
    }

    await this.bot.telegram.setMyCommands([
      { command: 'start', description: '–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –æ—Ç–∫—Ä—ã—Ç—å WebApp' },
    ]);

    this.bot.start((ctx) => {
      ctx.reply(replyMarkup(ctx), {
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å WebApp', web_app: { url: webAppUrl } }],
            [{ text: 'üìú –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã', callback_data: 'show_commands' }],
          ],
        },
      });
    });

    this.bot.action('show_commands', (ctx) => {
      ctx.reply(
        `üìú <b>–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:</b>
/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –æ—Ç–∫—Ä—ã—Ç—å WebApp
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥`,
        { parse_mode: 'HTML' },
      );
    });

    this.bot.command('help', (ctx) => {
      ctx.reply(
        `üìú <b>–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:</b> 
/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –æ—Ç–∫—Ä—ã—Ç—å WebApp
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥`,
        { parse_mode: 'HTML' },
      );
    });

    this.bot.on('message', (ctx) => {
      if (
        'text' in ctx.message &&
        (!ctx.message.text || !ctx.message.text.startsWith('/'))
      ) {
        ctx.reply(
          'üëã –ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –µ—ë –∏–∑ –º–µ–Ω—é.',
          {
            parse_mode: 'HTML',
            reply_markup: {
              keyboard: [[{ text: '/start' }, { text: '/help' }]],
              resize_keyboard: true,
              one_time_keyboard: true,
            },
          },
        );
      }
    });

    try {
      this.bot
        .launch({ dropPendingUpdates: true })
        .then(() => {
          console.log('ü§ñ Telegram –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ polling');
        })
        .catch((err) => {
          console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Telegram-–±–æ—Ç–∞:', err);
        });
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram-–±–æ—Ç–∞:', err);
    }
  }

  async onModuleDestroy() {
    await this.bot.stop();
    console.log('üõë Telegram –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  }

  async sendMessage(
    chatId: number,
    text: string,
  ): Promise<Message.TextMessage> {
    return this.bot.telegram.sendMessage(chatId, text);
  }
}
