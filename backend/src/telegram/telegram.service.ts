import { Injectable, OnModuleDestroy, OnModuleInit } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { Telegraf } from 'telegraf';
import { Message } from 'telegraf/typings/core/types/typegram';

@Injectable()
export class TelegramService implements OnModuleInit, OnModuleDestroy {
  private bot: Telegraf;

  constructor(private config: ConfigService) {
    const token = this.config.get<string>('TELEGRAM_BOT_TOKEN');
    if (!token) throw new Error('TELEGRAM_BOT_TOKEN is not defined');

    this.bot = new Telegraf(token);
  }

  async onModuleInit() {
    const webAppUrl = this.config.get<string>('WEBAPP_URL');

    this.bot.start((ctx) => {
      console.log('–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç:', ctx.from);
      ctx.reply('–û—Ç–∫—Ä—ã—Ç—å WebApp:', {
        reply_markup: {
          inline_keyboard: [
            [{ text: '–û—Ç–∫—Ä—ã—Ç—å WebApp', web_app: { url: webAppUrl } }],
          ],
        },
      });
    });

    try {
      this.bot
        .launch({ dropPendingUpdates: true })
        .then(() => {
          console.log('ü§ñ Telegram –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ polling');
        })
        .catch((err) => {
          console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Telegram-–±–æ—Ç–∞:', err);
        });
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram-–±–æ—Ç–∞:', err);
    }
  }

  async onModuleDestroy() {
    await this.bot.stop();
    console.log('üõë Telegram –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  }

  async sendMessage(
    chatId: number,
    text: string,
  ): Promise<Message.TextMessage> {
    return this.bot.telegram.sendMessage(chatId, text);
  }
}
